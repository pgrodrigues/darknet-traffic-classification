close all
clear

% Read the CSV file into a table
path = '.\datasets\Darknet.csv';
data = readtable(path, 'PreserveVariableNames', true);

% Remove sample in line 327 due to containing invalid data
data(327, :) = [];

% Replace each label with its correspondent mapping number
correspondence = containers.Map({'Tor', 'VPN', 'Non-Tor', 'NonVPN'}, {1, 2, 3, 4});
data.('Label') = cellfun(@(x) correspondence(x), data.('Label'));

% Show information about the original dataset
dataStats = printDatasetInformation(data, correspondence, 'original');

% Define the columns to be kept
columnsToKeep = {
  'Average Packet Size', ...
  'Bwd Init Win Bytes', ...
  'Bwd Packet Length Max', ...
  'Bwd Packet Length Mean', ...
  'Bwd Packet Length Min', ...
  'Bwd Packets/s', ...
  'Bwd Segment Size Avg', ...
  'FIN Flag Count', ...
  'Flow Duration', ...
  'Flow IAT Max', ...
  'Flow IAT Mean', ...
  'Flow IAT Min', ...
  'Fwd Header Length', ...
  'FWD Init Win Bytes', ...
  'Fwd Packets/s', ...
  'Fwd Segment Size Avg', ...
  'Fwd Seg Size Min', ...
  'Idle Max', ...
  'Idle Mean', ...
  'Idle Min', ...
  'Packet Length Max', ...
  'Packet Length Mean', ...
  'Packet Length Std', ...
  'Packet Length Variance', ...
  'Protocol', ...
  'Subflow Bwd Bytes', ...
  'Subflow Fwd Packets', ...
  'Total Length of Bwd Packet', ...
};

% Separate features and labels
featuresTable = data(:, ismember(data.Properties.VariableNames, columnsToKeep));
labelsTable = data(:, 'Label');

% Convert features and labels to array
features = table2array(featuresTable);
labels = table2array(labelsTable);

% Normalize the features with z-score, where all values will be between [-1, 1]
features = performDataNormalization(features);

% Augment data for the least represented class
[features, labels] = performDataAugmentation(features, labels);

% Shuffle data
rng(42); % Set the random seed for reproducibility
shuffledIndices = randperm(size(features, 1));
features = features(shuffledIndices, :);
labels = labels(shuffledIndices, :);

% Build table from the features and labels
preprocessedData = array2table([features, labels], 'VariableNames', [featuresTable.Properties.VariableNames, labelsTable.Properties.VariableNames]);

% Show information about the preprocessed dataset
preprocessedDataStats = printDatasetInformation(preprocessedData, correspondence, 'preprocessed');

% Show comparison between the original and the preprocessed datasets
generatePieCharts(dataStats, preprocessedDataStats);

% Save the preprocessed date into a CSV file
outputPath = '.\datasets\Darknet_preprocessed.csv';
writetable(preprocessedData, outputPath, 'Delimiter', ',');